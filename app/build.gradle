plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.dagger.hilt.android'
}

apply plugin: 'kotlin-kapt'

def configProperties = new Properties()
def configPropertiesFile = rootProject.file('config.properties')
if (configPropertiesFile.exists()) {
    configPropertiesFile.withReader('UTF-8') { reader ->
        configProperties.load(reader)
    }
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystorePropertiesFile.withReader('UTF-8') { reader ->
        keystoreProperties.load(reader)
    }
}

android {
    namespace 'com.umidsafarov.pokehead'
    compileSdk 33

    defaultConfig {
        applicationId "com.umidsafarov.pokehead"
        minSdk 21
        targetSdk 33
        versionCode 1
        versionName "1.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            buildConfigField 'String', 'POKEHEAD_DATABASE_NAME', configProperties['debugPokeheadDatabaseName']
            buildConfigField 'String', 'POKEHEAD_API_ENDPOINT', configProperties['debugPokeheadApiEndpoint']
        }
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField 'String', 'POKEHEAD_DATABASE_NAME', configProperties['releasePokeheadDatabaseName']
            buildConfigField 'String', 'POKEHEAD_API_ENDPOINT', configProperties['releasePokeheadApiEndpoint']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion "$compose_compiler_version"
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    //core
    implementation "androidx.core:core-ktx:$ktx_core_version"

    //lifecycle
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"

    //compose
    implementation "androidx.activity:activity-compose:$compose_activity_version"
    implementation "androidx.compose.ui:ui:$compose_ui_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_ui_version"
    implementation "androidx.compose.material:material:$compose_material_version"

    //navigation
    implementation "androidx.navigation:navigation-compose:$compose_navigation_version"
    implementation "androidx.hilt:hilt-navigation-compose:$compose_navigation_tools_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$compose_navigation_tools_version"

    //hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$hilt_version"

    //room
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Retrofit & OkHttp
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"

    //ui libraries
    implementation "io.coil-kt:coil-compose:$coil_version"

    //tests
    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$android_test_junit_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$android_test_espresso_version"
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_ui_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_ui_version"
    testImplementation "androidx.room:room-testing:$room_version"

}

kapt {
    correctErrorTypes = true
}